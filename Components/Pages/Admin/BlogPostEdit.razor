@page "/admin/blogposts/new"
@page "/admin/blogposts/{Id}"
@inject IBlogApi _api
@inject NavigationManager _manager
@inject IBrowserStorage _storage
@inject IBlogNotificationService notificationService
@using Components.RazorComponents
@using Markdig
@using Components.Interfaces
@attribute [Authorize]

<EditForm Model="Post" OnValidSubmit="SavePost">
    <DataAnnotationsValidator />
    <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />
    <BlogNavigationLock @ref="NavigationLock" />
    <InputText @bind-Value="Post.Title" />
    <ValidationMessage For="()=>Post.Title" />
    <InputDate @bind-Value="Post.PublishDate" />
    <ValidationMessage For="()=>Post.PublishDate" />
    <InputSelect @bind-Value="selectedCategory">
        <option value="0" disabled>Bez kategorii</option>
        @foreach(var category in Categories)
        {
            <option value="@category.Id">@category.Name</option>
        }
    </InputSelect>
    <ul>
        @foreach (var tag in Tags)
        {
            <li>
                @tag.Name
                @if (Post.Tags.Any(t => t.Id == tag.Id))
                {
                    <button type="button" @onclick="@(() => { Post.Tags.Remove(Post.Tags.Single(t => t.Id == tag.Id)); })">Usuń</button>
                }
                 else
                {
                    <button type="button" @onclick="@(() => { Post.Tags.Add(tag); })">Dodaj</button>
                }
            </li>
        }
    </ul>
    <InputTextAreaOnInput @bind-Value="Post.Text" @onkeyup="UpdateHTMLAsync" />
    <ValidationMessage For="()=>Post.Text" />
    <button type="submit" class="btn btn-success">Zapisz</button>
</EditForm>

@((MarkupString)markDownAsHTML)

@code {
    [Parameter]
    public string? Id { get; set; }
    BlogPost Post { get; set; } = new();
    List<Category> Categories { get; set; } = new();
    List<Tag> Tags { get; set; } = new();
    string? selectedCategory = null;
    string markDownAsHTML { get; set; }
    BlogNavigationLock? NavigationLock { get; set; }

    public async Task SavePost()
    {
        if (!string.IsNullOrEmpty(selectedCategory) && Categories != null)
        {
            var category = Categories.FirstOrDefault(c => c.Id == selectedCategory);
            if (category != null)
            {
                Post.Categoty = category;
            }
        }
        await _api.SaveBlogPostAsync(Post);
        NavigationLock?.CurrentEditContect.MarkAsUnmodified();
        _manager.NavigateTo("/admin/blogposts");
    }

    MarkdownPipeline pipeline = default!;
    protected override Task OnInitializedAsync()
    {
        pipeline = new MarkdownPipelineBuilder()
            .UseEmojiAndSmiley()
            .Build();
        return base.OnInitializedAsync();
    }
    protected async void UpdateHTMLAsync()
    {
        if (Post.Text != null)
        {
            markDownAsHTML = Markdig.Markdown.ToHtml(Post.Text, pipeline);
            if (string.IsNullOrEmpty(Post.Id))
            {
                await _storage.SetAsync("EditCurrentPost", Post);
            }
        }
        await notificationService.SendNotification(Post);
    }
    bool hasTag(Tag tag)
    {
        return Post.Tags.Contains(tag);
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var p = await _api.GetBlogPostAsync(Id);
            if (p != null)
            {
                Post = p;
                if (Post.Categoty != null)
                {
                    selectedCategory = Post.Categoty.Id;
                }
                UpdateHTMLAsync();
            }
        }
        Categories = (await _api.GetCategoriesAsync()) ?? new();
        Tags = (await _api.GetTagsAsync()) ?? new();
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && string.IsNullOrEmpty(Id))
        {
            var saved = await _storage.GetAsync<BlogPost>("EditCurrentPost");
            if (saved != null)
            {
                Post = saved;
                StateHasChanged();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}

